//
//  Token.swift
//  MinCamlSwiftPackageDescription
//
//  Created by 藤井陽介 on 2017/11/07.
//

import Foundation

// MARK: - Token

/// The different kinds a token generated by the lexer can have
/// - integer:
/// - floating number:
/// - boolean:
/// - identifier: An identifier
/// - `operator`: A operator
/// - leftParen: '('
/// - rightParen: ')'
/// - semiColon
/// - endOfFile: Artificial token to represent the end of a file
public enum TokenKind: CustomStringConvertible {
    
    // MARK: Keyword
    /// The 'if' keyword
    case `if`
    /// The 'then' keyword
    case then
    /// The 'else' keyword
    case `else`
    /// The 'let' keyword
    case `let`
    /// The 'in' keyword
    case `in`
    /// The 'rec' keyword
    case rec
    /// The 'fun' keyword
    case fun
    /// The 'create_array' keyword
    /// Maybe it can be "Array.create" or "Array.make"
    case createArray
    /// The 'input' keyword
    case input
    /// The 'output' keyword
    case output
    
    // MARK: Operator
    /// '+'
    case plus
    /// '-'
    case minus
    /// '*'
    case ast
    /// '/'
    case slash
    /// '+.'
    case plusDot
    /// '-.'
    case minusDot
    /// '*.'
    case astDot
    /// '/.'
    case slashDot
    /// '='
    case equal
    /// '<>'
    case lessGreater
    /// '<='
    case lessEqual
    /// '>='
    case greaterEqual
    /// '<'
    case less
    /// '>'
    case greater
    /// The 'lxor' keyword
    case lxor
    /// The 'lor' keyword
    case lor
    /// The 'land' keyword
    case land
    /// The 'lsl' keyword
    case lsl
    /// The 'lsr' keyword
    case lsr
    /// The 'not' keyword
    case not
    
    // MARK: Literal
    /// An integer literal
    case integer(value: Int)
    /// A floating number literal
    case float(value: Double)
    /// A boolean literal
    case boolean(value: Bool)
    /// An identifier
    case identifier(name: String)
    /// A comment
    case comment
    
    // MARK: Symbol
    /// `(`
    case leftParen
    /// `)`
    case rightParen
    /// ','
    case comma
    /// '_'
    case underscore
    /// '.'
    case dot
    /// '<-'
    case lessMinus
    /// '->'
    case minusGreater
    /// ';'
    case semicolon
    
    case endOfFile
    
    public var description: String {
        
        switch self {
        case .if:
            return "Keyword if"
        case .then:
            return "Keyword then"
        case .else:
            return "Keyword else"
        case .let:
            return "Keyword let"
        case .in:
            return "Keyword in"
        case .rec:
            return "Keyword rec"
        case .fun:
            return "Keyword fun"
        case .createArray:
            return "Create Array"
        case .input:
            return "Keyword input"
        case .output:
            return "Keyword output"
        case .plus:
            return "Plus '+'"
        case .minus:
            return "Minus '-'"
        case .ast:
            return "Multiply '*'"
        case .slash:
            return "Divide '/'"
        case .plusDot:
            return "Plus '+.'"
        case .minusDot:
            return "Minus '-.'"
        case .astDot:
            return "Multiply '*.'"
        case .slashDot:
            return "Divide '/.'"
        case .equal:
            return "Equal '='"
        case .lessGreater:
            return "Unequal '<>'"
        case .lessEqual:
            return "Less equal '<='"
        case .greaterEqual:
            return "Greater equal '>='"
        case .less:
            return "Less '<'"
        case .greater:
            return "Greater '>'"
        case .lxor:
            return "Xor 'lxor'"
        case .lor:
            return "Or 'lor'"
        case .land:
            return "And 'land'"
        case .lsl:
            return "Shift left 'lsl'"
        case .lsr:
            return "Shift right 'lsr'"
        case .not:
            return "Keyword not"
        case .integer(let value):
            return "Integer \(value)"
        case .float(let value):
            return "Floating Point Number \(value)"
        case .boolean(let value):
            return "Boolean \(value)"
        case .identifier(let name):
            return "Identifier \(name)"
        case .comment:
            return "Comment"
        case .leftParen:
            return "Left paranthesis '('"
        case .rightParen:
            return "Right parenthesis ')'"
        case .comma:
            return "Comma ','"
        case .underscore:
            return "Underscore '_'"
        case .dot:
            return "Dot '.'"
        case .lessMinus:
            return "Less Minus '<-'"
        case .minusGreater:
            return "Minus Greater '->'"
        case .semicolon:
            return "Semicolon ';'"
        case .endOfFile:
            return "End of file"
        }
    }
    
    public var sourceCodeRepresentation: String {
        
        switch self {
        case .if:
            return "if"
        case .then:
            return "then"
        case .else:
            return "else"
        case .let:
            return "let"
        case .in:
            return "in"
        case .rec:
            return "rec"
        case .fun:
            return "fun"
        case .createArray:
            return "create_array"
        case .input:
            return "input"
        case .output:
            return "output"
        case .plus:
            return "+"
        case .minus:
            return "-"
        case .ast:
            return "*"
        case .slash:
            return "/"
        case .plusDot:
            return "+."
        case .minusDot:
            return "-."
        case .astDot:
            return "*."
        case .slashDot:
            return "/."
        case .equal:
            return "="
        case .lessGreater:
            return "<>"
        case .lessEqual:
            return "<="
        case .greaterEqual:
            return ">="
        case .less:
            return "<"
        case .greater:
            return ">"
        case .lxor:
            return "lxor"
        case .lor:
            return "lor"
        case .land:
            return "land"
        case .lsl:
            return "lsl"
        case .lsr:
            return "lsr"
        case .not:
            return "not"
        case .integer(let value):
            return "\(value)"
        case .float(let value):
            return "\(value)"
        case .boolean(let value):
            return "\(value)"
        case .identifier(let name):
            return "\(name)"
        case .comment:
            return "(* comment *)"
        case .leftParen:
            return "("
        case .rightParen:
            return ")"
        case .comma:
            return ","
        case .underscore:
            return "_"
        case .dot:
            return "."
        case .lessMinus:
            return "<-"
        case .minusGreater:
            return "->"
        case .semicolon:
            return ";"
        case .endOfFile:
            return "eof"
        }
    }
}
